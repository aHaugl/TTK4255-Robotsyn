import numpy as np
import numba as nb


@nb.njit(cache=True)
def get_rotors_T(states):
    """
    base_x, base_y, base_p, base_q, base_r, hinge_z, hinge_p, hinge_q, rotors_x, rotors_y, rotors_z, rotors_p, rotors_q, rotors_r
    """

    base_x = states[0]
    base_y = states[1]
    base_p = states[2]
    base_q = states[3]
    base_r = states[4]
    hinge_z = states[5]
    hinge_p = states[6]
    hinge_q = states[7]
    rotors_x = states[8]
    rotors_y = states[9]
    rotors_z = states[10]
    rotors_p = states[11]
    rotors_q = states[12]
    rotors_r = states[13]

    x0 = np.sin(rotors_r)
    x1 = np.sin(hinge_p)
    x2 = np.sin(base_p)
    x3 = np.cos(base_p)
    x4 = np.sin(base_q)
    x5 = x3*x4
    x6 = np.cos(base_q)
    x7 = x3*x6
    x8 = 0.448564787567025*x2 + 0.893629833571167*x5 + 0.0146748733049962*x7
    x9 = np.cos(hinge_p)
    x10 = np.sin(base_r)
    x11 = 0.0146748733049962*x4
    x12 = 0.893629833571167*x6
    x13 = np.cos(base_r)
    x14 = 0.448564787567025*x3
    x15 = x13*x2
    x16 = 0.893629833571167*x4
    x17 = 0.0146748733049962*x6
    x18 = x10*x11 - x10*x12 - x13*x14 + x15*x16 + x15*x17
    x19 = x1*x8 + x18*x9
    x20 = np.sin(hinge_q)
    x21 = x8*x9
    x22 = np.cos(hinge_q)
    x23 = x10*x2
    x24 = -x10*x14 - x11*x13 + x12*x13 + x16*x23 + x17*x23
    x25 = x1*x18
    x26 = -x20*x21 + x20*x25 + x22*x24
    x27 = np.cos(rotors_q)
    x28 = np.cos(rotors_r)
    x29 = x27*x28
    x30 = x21*x22
    x31 = x20*x24
    x32 = x22*x25
    x33 = x30 + x31 - x32
    x34 = np.sin(rotors_q)
    x35 = x28*x34
    x36 = np.cos(rotors_p)
    x37 = x19*x28
    x38 = np.sin(rotors_p)
    x39 = x27*x38
    x40 = x34*x36
    x41 = x0*x40 + x39
    x42 = x34*x38
    x43 = x27*x36
    x44 = -x0*x43 + x42
    x45 = x0*x39 + x40
    x46 = x0*x42 - x43
    x47 = -0.214136510870782*x2 + 0.0915174007171296*x5 + 0.97250713111939*x7
    x48 = 0.97250713111939*x4
    x49 = 0.0915174007171296*x6
    x50 = 0.214136510870782*x3
    x51 = 0.0915174007171296*x4
    x52 = 0.97250713111939*x6
    x53 = x10*x48 - x10*x49 + x13*x50 + x15*x51 + x15*x52
    x54 = x1*x47 + x53*x9
    x55 = x47*x9
    x56 = x20*x55
    x57 = x10*x50 - x13*x48 + x13*x49 + x23*x51 + x23*x52
    x58 = x22*x57
    x59 = x1*x53
    x60 = x20*x59
    x61 = x56 - x58 - x60
    x62 = x22*x55
    x63 = x20*x57
    x64 = x22*x59
    x65 = -x62 - x63 + x64
    x66 = x28*x54
    x67 = x62 + x63 - x64
    x68 = -x56 + x58 + x60
    x69 = 0.867718379468268*x2 - 0.43937488084499*x5 + 0.232410257982334*x7
    x70 = 0.232410257982334*x4
    x71 = 0.43937488084499*x6
    x72 = 0.867718379468268*x3
    x73 = 0.43937488084499*x4
    x74 = 0.232410257982334*x6
    x75 = x10*x70 + x10*x71 - x13*x72 - x15*x73 + x15*x74
    x76 = x1*x69 + x75*x9
    x77 = x69*x9
    x78 = x10*x72 + x13*x70 + x13*x71 + x23*x73 - x23*x74
    x79 = x1*x75
    x80 = x20*x77 - x20*x79 + x22*x78
    x81 = x22*x77
    x82 = x20*x78
    x83 = x22*x79
    x84 = -x81 + x82 + x83
    x85 = x28*x76

    return np.array([[x0*x19 + x26*x29 - x33*x35, x26*x44 + x33*x41 + x36*x37, x26*x45 - x33*x46 - x37*x38, 0.893629833571167*base_x - 0.448564787567025*base_y + hinge_z*x8 + rotors_x*x26 + rotors_y*x19 + rotors_z*x33 - 0.05*x30 - 0.05*x31 + 0.05*x32 - 0.258257036698329],
                     [-x0*x54 + x29*x61 - x35*x65, -x36*x66 - x41*x67 - x44*x68, x38*x66 - x45*x68 + x46*x67, -0.0915174007171296*base_x - 0.214136510870782 *
                         base_y - hinge_z*x47 + rotors_x*x61 - rotors_y*x54 + rotors_z*x65 + 0.05*x62 + 0.05*x63 - 0.05*x64 + 0.116344254058977],
                     [-x0*x76 + x29*x80 - x35*x84, -x36*x85 + x41*x84 + x44*x80, x38*x85 + x45*x80 - x46*x84, 0.43937488084499*base_x + 0.867718379468268 *
                         base_y - hinge_z*x69 + rotors_x*x80 - rotors_y*x76 + rotors_z*x84 + 0.05*x81 - 0.05*x82 - 0.05*x83 + 0.790231880961314],
                     [0., 0., 0., 1.]])


@nb.njit(cache=True)
def get_rotors_T_diff(states):
    """
    base_x, base_y, base_p, base_q, base_r, hinge_z, hinge_p, hinge_q, rotors_x, rotors_y, rotors_z, rotors_p, rotors_q, rotors_r
    """

    base_x = states[0]
    base_y = states[1]
    base_p = states[2]
    base_q = states[3]
    base_r = states[4]
    hinge_z = states[5]
    hinge_p = states[6]
    hinge_q = states[7]
    rotors_x = states[8]
    rotors_y = states[9]
    rotors_z = states[10]
    rotors_p = states[11]
    rotors_q = states[12]
    rotors_r = states[13]

    x0 = np.sin(rotors_r)
    x1 = np.sin(hinge_p)
    x2 = np.cos(base_p)
    x3 = 0.448564787567025*x2
    x4 = np.sin(base_p)
    x5 = np.sin(base_q)
    x6 = 0.893629833571167*x5
    x7 = x4*x6
    x8 = np.cos(base_q)
    x9 = 0.0146748733049962*x8
    x10 = x4*x9
    x11 = x10 - x3 + x7
    x12 = np.cos(base_r)
    x13 = np.cos(hinge_p)
    x14 = x2*x6 + x2*x9 + 0.448564787567025*x4
    x15 = x13*x14
    x16 = x12*x15
    x17 = x1*x11 - x16
    x18 = np.sin(hinge_q)
    x19 = x11*x13
    x20 = np.cos(hinge_q)
    x21 = np.sin(base_r)
    x22 = x14*x21
    x23 = x1*x14
    x24 = x12*x23
    x25 = x18*x19 + x18*x24 + x20*x22
    x26 = np.cos(rotors_q)
    x27 = np.cos(rotors_r)
    x28 = x26*x27
    x29 = x18*x22
    x30 = x19*x20
    x31 = x20*x24
    x32 = x29 - x30 - x31
    x33 = np.sin(rotors_q)
    x34 = x27*x33
    x35 = 0.0146748733049962*x5
    x36 = 0.893629833571167*x8
    x37 = x2*(x35 - x36)
    x38 = x1*x37
    x39 = x12*x35
    x40 = x12*x36
    x41 = x21*x6 + x21*x9 - x39*x4 + x4*x40
    x42 = x13*x41
    x43 = x38 - x42
    x44 = x13*x20
    x45 = x21*x35
    x46 = x21*x36
    x47 = x12*x6 + x12*x9 + x4*x45 - x4*x46
    x48 = x1*x41
    x49 = x18*x47 + x20*x48 + x37*x44
    x50 = x13*x18
    x51 = x18*x48 - x20*x47 + x37*x50
    x52 = x10*x21 - x21*x3 + x21*x7 - x39 + x40
    x53 = x13*x52
    x54 = x12*x3
    x55 = x12*x7
    x56 = x10*x12
    x57 = x45 - x46 - x54 + x55 + x56
    x58 = x20*x57
    x59 = x18*x52
    x60 = x1*x59
    x61 = x58 - x60
    x62 = x18*x57
    x63 = x20*x52
    x64 = x1*x63 + x62
    x65 = -x1*x57 + x15
    x66 = x13*x57 + x23
    x67 = x27*x66
    x68 = x20*x33
    x69 = x1*x62
    x70 = x15*x18
    x71 = -x63 + x70
    x72 = -x69 + x71
    x73 = -x1*x58 + x15*x20 + x59
    x74 = x26*x73
    x75 = x63 + x69 - x70
    x76 = x0*x33
    x77 = x0*x26
    x78 = np.cos(rotors_p)
    x79 = x27*x78
    x80 = np.sin(rotors_p)
    x81 = x33*x80
    x82 = x26*x78
    x83 = -x0*x82 + x81
    x84 = x26*x80
    x85 = x33*x78
    x86 = x0*x85 + x84
    x87 = -x29 + x30 + x31
    x88 = -x58 + x60
    x89 = x18*x66
    x90 = x20*x66
    x91 = x1*x18
    x92 = x71 + x91*(-x45 + x46 + x54 - x55 - x56)
    x93 = x73*x83
    x94 = x0*x84 + x85
    x95 = x0*x81 - x82
    x96 = x0*x66
    x97 = x34*x73
    x98 = x28*x75
    x99 = x27*x80
    x100 = x73*x94
    x101 = 0.0224282393783513*x2
    x102 = 0.0446814916785584*x5
    x103 = x102*x4
    x104 = 0.000733743665249811*x8
    x105 = x104*x4
    x106 = x102*x2 + x104*x2 + 0.0224282393783513*x4
    x107 = x106*x18
    x108 = x1*x20
    x109 = x106*x108
    x110 = 0.000733743665249811*x5
    x111 = 0.0446814916785584*x8
    x112 = x2*x44
    x113 = x110*x21
    x114 = x111*x21
    x115 = x110*x12
    x116 = x111*x12
    x117 = -x101*x12 + x103*x12 + x105*x12 + x113 - x114
    x118 = x117*x18
    x119 = x20*(-x101*x21 + x103*x21 + x105*x21 - x115 + x116)
    x120 = 0.214136510870782*x2
    x121 = 0.0915174007171296*x5
    x122 = x121*x4
    x123 = 0.97250713111939*x8
    x124 = x123*x4
    x125 = x120 + x122 + x124
    x126 = x1*x125
    x127 = 0.214136510870782*x4
    x128 = x121*x2
    x129 = x123*x2
    x130 = -x127 + x128 + x129
    x131 = x13*x130
    x132 = -x12*x131 + x126
    x133 = x20*x21
    x134 = x1*x130
    x135 = x12*x134
    x136 = x125*x50 + x130*x133 + x135*x18
    x137 = x127 - x128 - x129
    x138 = x18*x21
    x139 = x125*x44 + x135*x20
    x140 = 0.97250713111939*x5
    x141 = 0.0915174007171296*x8
    x142 = x2*(x140 - x141)
    x143 = x1*x142
    x144 = x121*x21
    x145 = x123*x21
    x146 = x12*x140
    x147 = x146*x4
    x148 = x12*x141
    x149 = x148*x4
    x150 = x144 + x145 - x147 + x149
    x151 = -x13*x150 + x143
    x152 = x140*x21
    x153 = x141*x21
    x154 = x12*x121 + x12*x123 + x152*x4 - x153*x4
    x155 = x108*x150 + x142*x44 + x154*x18
    x156 = x142*x50
    x157 = x154*x20
    x158 = x150*x91
    x159 = x156 - x157 + x158
    x160 = x120*x21
    x161 = x122*x21
    x162 = x124*x21
    x163 = -x146 + x148 + x160 + x161 + x162
    x164 = x13*x163
    x165 = x12*x120
    x166 = x12*x122
    x167 = x12*x124
    x168 = x152 - x153 + x165 + x166 + x167
    x169 = x168*x18
    x170 = x163*x20
    x171 = x1*x170 + x169
    x172 = x168*x20
    x173 = x163*x18
    x174 = x1*x173 - x172
    x175 = x1*x168 - x131
    x176 = x13*x168
    x177 = x134 + x176
    x178 = x177*x27
    x179 = -x152 + x153 - x165 - x166 - x167
    x180 = x13*x179
    x181 = x18*(x134 - x180)
    x182 = x131*x18
    x183 = x1*x169
    x184 = x170 - x182 + x183
    x185 = x131*x20
    x186 = x1*x172
    x187 = x173 + x185 - x186
    x188 = x13*x137
    x189 = x1*x179
    x190 = x18*(x146 - x148 - x160 - x161 - x162) + x188*x20 - x189*x20
    x191 = -x170 + x182 - x183
    x192 = -x130*x138 + x139
    x193 = x1*x137
    x194 = x20*(-x176 + x193)
    x195 = -x173 - x185 + x186
    x196 = x0*x177
    x197 = 0.00457587003585648*x5
    x198 = 0.0486253565559695*x8
    x199 = x197*x2 + x198*x2 - 0.0107068255435391*x4
    x200 = 0.0107068255435391*x2
    x201 = x197*x4
    x202 = x198*x4
    x203 = x108*x199
    x204 = 0.0486253565559695*x5
    x205 = 0.00457587003585648*x8
    x206 = x204*x21
    x207 = x205*x21
    x208 = x12*x204
    x209 = x12*x205
    x210 = x12*x200 + x12*x201 + x12*x202 + x206 - x207
    x211 = x18*x210
    x212 = x20*(x200*x21 + x201*x21 + x202*x21 - x208 + x209)
    x213 = 0.867718379468268*x2
    x214 = 0.43937488084499*x5
    x215 = x214*x4
    x216 = 0.232410257982334*x8
    x217 = x216*x4
    x218 = x213 + x215 - x217
    x219 = 0.867718379468268*x4
    x220 = x2*x214
    x221 = x2*x216
    x222 = x219 - x220 + x221
    x223 = x13*x222
    x224 = x1*x218 + x12*x223
    x225 = -x213 - x215 + x217
    x226 = -x219 + x220 - x221
    x227 = x1*x222
    x228 = x12*x227
    x229 = x20*x228
    x230 = x218*x50
    x231 = x133*x222
    x232 = x18*x228
    x233 = x230 - x231 - x232
    x234 = 0.232410257982334*x5
    x235 = 0.43937488084499*x8
    x236 = x2*(x234 + x235)
    x237 = x12*x234
    x238 = x12*x235
    x239 = x21*x214 - x21*x216 + x237*x4 + x238*x4
    x240 = x1*x236 + x13*x239
    x241 = x21*x234
    x242 = x21*x235
    x243 = -x12*x214 + x12*x216 + x241*x4 + x242*x4
    x244 = x20*x243 - x236*x50 + x239*x91
    x245 = -x108*x239 + x18*x243 + x236*x44
    x246 = x21*x213 + x21*x215 - x21*x217 + x237 + x238
    x247 = x13*x246
    x248 = x12*x213
    x249 = x12*x215
    x250 = x12*x217
    x251 = x241 + x242 - x248 - x249 + x250
    x252 = x20*x251
    x253 = x18*x246
    x254 = x1*x253 + x252
    x255 = -x241 - x242 + x248 + x249 - x250
    x256 = x20*x246
    x257 = x1*x256
    x258 = x1*x251
    x259 = -x223 + x258
    x260 = x13*x251
    x261 = x227 + x260
    x262 = x261*x27
    x263 = x13*x255
    x264 = x18*(x227 - x263)
    x265 = x18*x223
    x266 = x18*x258
    x267 = x256 + x265 - x266
    x268 = x267*x33
    x269 = x20*x223
    x270 = x1*x252
    x271 = x253 - x269 + x270
    x272 = x13*x226
    x273 = x1*x255
    x274 = x20*x272 - x20*x273 + x253
    x275 = x218*x44
    x276 = x138*x222
    x277 = -x229 + x275 + x276
    x278 = -x230 + x231 + x232
    x279 = -x18*x251 + x257
    x280 = x1*x226
    x281 = x20*(-x260 + x280)
    x282 = x271*x83
    x283 = -x256 + x266
    x284 = -x265 + x283
    x285 = x0*x261
    x286 = x271*x34
    x287 = x267*x28
    x288 = x271*x94
    x289 = 0.0433859189734134*x2
    x290 = 0.0219687440422495*x5
    x291 = x290*x4
    x292 = 0.0116205128991167*x8
    x293 = x292*x4
    x294 = -x2*x290 + x2*x292 + 0.0433859189734134*x4
    x295 = x108*x294
    x296 = 0.0116205128991167*x5
    x297 = 0.0219687440422495*x8
    x298 = x21*x296
    x299 = x21*x297
    x300 = x12*x296
    x301 = x12*x297
    x302 = -x12*x289 - x12*x291 + x12*x293 + x298 + x299
    x303 = x18*x302
    x304 = x20*(x21*x289 + x21*x291 - x21*x293 + x300 + x301)

    return np.array([[0., 0., -x0*x17 + x25*x28 - x32*x34, -x0*x43 + x28*x51 + x34*x49, -x0*x53 + x28*x61 - x34*x64, 0., x0*x65 + x18*x26*x67 + x67*x68, x27*(x33*x72 - x74), 0., 0., 0., 0., -x27*(x33*x75 + x74), x67 + x73*x76 - x75*x77],
                     [0., 0., -x17*x79 + x25*x83 - x86*x87, -x43*x79 - x49*x86 + x51*x83, -x53*x79 + x64*x86 - x83*x88, 0., x65*x79 +
                         x83*x89 - x86*x90, -x86*x92 - x93, 0., 0., 0., -x67*x80 - x73*x95 + x75*x94, x75*x86 - x93, x78*(-x96 + x97 - x98)],
                     [0., 0., x25*x94 - x32*x95 - x99*(x1*(-x10 + x3 - x7) + x16), x49*x95 + x51*x94 - x99*(-x38 + x42), x53*x99 - x64*x95 - x88*x94,
                      0., -x65*x99 + x89*x94 + x90*x95, -x100 + x72*x95, 0., 0., 0., -x67*x78 - x73*x86 - x75*x83, -x100 - x75*x95, x80*(x96 - x97 + x98)],
                     [0.893629833571167, -0.448564787567025, -hinge_z*x11 + rotors_x*x25 - rotors_y*x17 - rotors_z*x87 - x107*x21 + x109*x12 + x44*(-x101 + x103 + x105), -hinge_z*x37 + rotors_x*x51 - rotors_y*x43 - rotors_z*x49 + x108*(x102*x21 + x104*x21 - x115*x4 + x116*x4) + x112*(
                         x110 - x111) + x18*(x102*x12 + x104*x12 + x113*x4 - x114*x4), rotors_x*x61 - rotors_y*x53 + rotors_z*x64 - x1*x119 - x118, x14, rotors_x*x89 + rotors_y*x65 - rotors_z*x90 + x109 + x117*x44, -rotors_x*x73 - rotors_z*x92 - x1*x118 + x107*x13 - x119, x75, x66, x73, 0., 0., 0.],
                     [0., 0., x0*x132 - x136*x28 - x34*(x137*x138 + x139), x0*x151 - x155*x34 - x159*x28, x0*x164 + x171*x34 + x174*x28, 0., x0*x175 -
                      x178*x68 - x181*x28, x27*(x184*x33 + x187*x26), 0., 0., 0., 0., -x27*(x190*x26 + x191*x33), -x178 + x190*x76 - x191*x77],
                     [0., 0., x132*x79 - x136*x83 + x192*x86, x151*x79 + x155*x86 - x159*x83, x164*x79 - x171*x86 + x174*x83, 0., x175*x79 - x181*x83 -
                      x194*x86, -x184*x86 + x187*x83, 0., 0., 0., x178*x80 - x184*x94 + x187*x95, x191*x86 - x195*x83, x78*(-x191*x28 + x195*x34 + x196)],
                     [0., 0., -x136*x94 - x192*x95 - x99*(x12*x188 + x126), -x155*x95 + x94*(-x156 + x157 - x158) - x99*(x13*(-x144 - x145 + x147 - x149) + x143), -x164*x99 + x171*x95 + x174*x94,
                      0., -x181*x94 + x194*x95 - x99*(x188 - x189), x184*x95 + x187*x94, 0., 0., 0., -x191*x83 - x195*x86 - x79*(x180 + x193), -x191*x95 - x195*x94, x80*(-x184*x28 + x187*x34 - x196)],
                     [-0.0915174007171296, -0.214136510870782, hinge_z*x125 - rotors_x*x136 + rotors_y*x132 + rotors_z*x192 - x12*x203 + x138*x199 - x44*(x200 + x201 + x202), hinge_z*x142 - rotors_x*x159 + rotors_y*x151 + rotors_z*x155 - x108*(x197*x21 + x198*x21 - x208*x4 + x209*x4) - x112*(
                         x204 - x205) - x18*(x12*x197 + x12*x198 + x206*x4 - x207*x4), rotors_x*x174 + rotors_y*x164 - rotors_z*x171 + x1*x212 + x211, x137, -rotors_x*x181 + rotors_y*x175 - rotors_z*x194 - x203 - x210*x44, rotors_x*x187 - rotors_z*x184 + x1*x211 - x199*x50 + x212, x191, -x177, x195, 0., 0., 0.],
                     [0., 0., -x0*x224 + x233*x28 - x34*(x138*x226 + x225*x44 + x229), x0*x240 + x244*x28 - x245*x34, -x0*x247 - x254*x28 - x34*(
                         x18*x255 + x257), 0., x0*x259 - x262*x68 - x264*x28, -x27*(x26*x271 + x268), 0., 0., 0., 0., -x27*(x26*x274 + x268), -x262 - x267*x77 + x274*x76],
                     [0., 0., -x224*x79 - x277*x86 - x278*x83, x240*x79 + x244*x83 + x245*x86, -x247*x79 - x254*x83 + x279*x86, 0., x259*x79 -
                      x264*x83 - x281*x86, -x282 - x284*x86, 0., 0., 0., x262*x80 + x267*x94 - x271*x95, x267*x86 - x282, x78*(x285 + x286 - x287)],
                     [0., 0., x233*x94 - x95*(x229 - x275 - x276) - x99*(x1*x225 + x12*x272), -x240*x99 + x244*x94 - x245*x95, x247*x99 - x254*x94 - x279*x95, 0., -x264 *
                      x94 + x281*x95 - x99*(x272 - x273), x284*x95 - x288, 0., 0., 0., -x267*x83 - x271*x86 - x79*(x263 + x280), -x267*x95 - x288, x80*(-x285 - x286 + x287)],
                     [0.43937488084499, 0.867718379468268, -hinge_z*x218 - rotors_x*x278 - rotors_y*x224 - rotors_z*x277 - x12*x295 + x138*x294 + x44*(x289 + x291 - x293), hinge_z*x236 + rotors_x*x244 + rotors_y*x240 + rotors_z*x245 + x108*(x21*x290 - x21*x292 + x300*x4 + x301*x4) - x112*(x296 + x297) - x18*(
                         -x12*x290 + x12*x292 + x298*x4 + x299*x4), -rotors_x*x254 - rotors_y*x247 + rotors_z*x279 - x1*x304 + x303, x226, -rotors_x*x264 + rotors_y*x259 - rotors_z*x281 - x295 - x302*x44, rotors_x*(-x253 + x269 - x270) - rotors_z*(x18*x272 + x283) + x1*x303 - x294*x50 - x304, x267, -x261, x271, 0., 0., 0.],
                     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])


@nb.njit(cache=True)
def get_arm_T(states):
    """
    base_x, base_y, base_p, base_q, base_r, hinge_z, hinge_p, hinge_q, rotors_x, rotors_y, rotors_z, rotors_p, rotors_q, rotors_r
    """

    base_x = states[0]
    base_y = states[1]
    base_p = states[2]
    base_q = states[3]
    base_r = states[4]
    hinge_z = states[5]
    hinge_p = states[6]
    hinge_q = states[7]
    rotors_x = states[8]
    rotors_y = states[9]
    rotors_z = states[10]
    rotors_p = states[11]
    rotors_q = states[12]
    rotors_r = states[13]

    x0 = np.sin(hinge_q)
    x1 = np.sin(base_p)
    x2 = np.sin(base_q)
    x3 = np.cos(base_p)
    x4 = x2*x3
    x5 = np.cos(base_q)
    x6 = x3*x5
    x7 = 0.448564787567025*x1 + 0.893629833571167*x4 + 0.0146748733049962*x6
    x8 = np.cos(hinge_p)
    x9 = x7*x8
    x10 = np.cos(hinge_q)
    x11 = np.cos(base_r)
    x12 = 0.0146748733049962*x2
    x13 = np.sin(base_r)
    x14 = 0.448564787567025*x3
    x15 = 0.893629833571167*x5
    x16 = x1*x13
    x17 = 0.893629833571167*x2
    x18 = 0.0146748733049962*x5
    x19 = -x11*x12 + x11*x15 - x13*x14 + x16*x17 + x16*x18
    x20 = np.sin(hinge_p)
    x21 = x1*x11
    x22 = -x11*x14 + x12*x13 - x13*x15 + x17*x21 + x18*x21
    x23 = x20*x22
    x24 = x10*x9
    x25 = x0*x19
    x26 = x10*x23
    x27 = -0.214136510870782*x1 + 0.0915174007171296*x4 + 0.97250713111939*x6
    x28 = x27*x8
    x29 = 0.97250713111939*x2
    x30 = 0.214136510870782*x3
    x31 = 0.0915174007171296*x5
    x32 = 0.0915174007171296*x2
    x33 = 0.97250713111939*x5
    x34 = -x11*x29 + x11*x31 + x13*x30 + x16*x32 + x16*x33
    x35 = x11*x30 + x13*x29 - x13*x31 + x21*x32 + x21*x33
    x36 = x20*x35
    x37 = x10*x28
    x38 = x0*x34
    x39 = x10*x36
    x40 = 0.867718379468268*x1 - 0.43937488084499*x4 + 0.232410257982334*x6
    x41 = x40*x8
    x42 = 0.232410257982334*x2
    x43 = 0.867718379468268*x3
    x44 = 0.43937488084499*x5
    x45 = 0.43937488084499*x2
    x46 = 0.232410257982334*x5
    x47 = x11*x42 + x11*x44 + x13*x43 + x16*x45 - x16*x46
    x48 = -x11*x43 + x13*x42 + x13*x44 - x21*x45 + x21*x46
    x49 = x20*x48
    x50 = x10*x41
    x51 = x0*x47
    x52 = x10*x49

    return np.array([[x0*x23 - x0*x9 + x10*x19, x20*x7 + x22*x8, x24 + x25 - x26, 0.893629833571167*base_x - 0.448564787567025*base_y + hinge_z*x7 - 0.05*x24 - 0.05*x25 + 0.05*x26 - 0.258257036698329],
                     [x0*x28 - x0*x36 - x10*x34, -x20*x27 - x35*x8, -x37 - x38 + x39, -0.0915174007171296*base_x -
                         0.214136510870782*base_y - hinge_z*x27 + 0.05*x37 + 0.05*x38 - 0.05*x39 + 0.116344254058977],
                     [x0*x41 - x0*x49 + x10*x47, -x20*x40 - x48*x8, -x50 + x51 + x52, 0.43937488084499*base_x +
                         0.867718379468268*base_y - hinge_z*x40 + 0.05*x50 - 0.05*x51 - 0.05*x52 + 0.790231880961314],
                     [0., 0., 0., 1.]])


@nb.njit(cache=True)
def get_arm_T_diff(states):
    """
    base_x, base_y, base_p, base_q, base_r, hinge_z, hinge_p, hinge_q, rotors_x, rotors_y, rotors_z, rotors_p, rotors_q, rotors_r
    """

    base_x = states[0]
    base_y = states[1]
    base_p = states[2]
    base_q = states[3]
    base_r = states[4]
    hinge_z = states[5]
    hinge_p = states[6]
    hinge_q = states[7]
    rotors_x = states[8]
    rotors_y = states[9]
    rotors_z = states[10]
    rotors_p = states[11]
    rotors_q = states[12]
    rotors_r = states[13]

    x0 = np.sin(hinge_q)
    x1 = np.cos(hinge_p)
    x2 = np.cos(base_p)
    x3 = 0.448564787567025*x2
    x4 = np.sin(base_p)
    x5 = np.sin(base_q)
    x6 = 0.893629833571167*x5
    x7 = x4*x6
    x8 = np.cos(base_q)
    x9 = 0.0146748733049962*x8
    x10 = x4*x9
    x11 = x10 - x3 + x7
    x12 = x1*x11
    x13 = np.cos(hinge_q)
    x14 = x2*x6 + x2*x9 + 0.448564787567025*x4
    x15 = np.sin(base_r)
    x16 = x14*x15
    x17 = np.cos(base_r)
    x18 = np.sin(hinge_p)
    x19 = x14*x18
    x20 = x17*x19
    x21 = 0.0146748733049962*x5
    x22 = 0.893629833571167*x8
    x23 = x2*(x21 - x22)
    x24 = x0*x1
    x25 = x15*x21
    x26 = x15*x22
    x27 = x17*x6 + x17*x9 + x25*x4 - x26*x4
    x28 = x17*x21
    x29 = x17*x22
    x30 = x15*x6 + x15*x9 - x28*x4 + x29*x4
    x31 = x18*x30
    x32 = x10*x17 - x17*x3 + x17*x7 + x25 - x26
    x33 = x13*x32
    x34 = x10*x15 - x15*x3 + x15*x7 - x28 + x29
    x35 = x0*x34
    x36 = x1*x32 + x19
    x37 = x1*x14
    x38 = x18*x32
    x39 = x1*x13
    x40 = x13*x34
    x41 = 0.0224282393783513*x2
    x42 = 0.0446814916785584*x5
    x43 = x4*x42
    x44 = 0.000733743665249811*x8
    x45 = x4*x44
    x46 = x2*x42 + x2*x44 + 0.0224282393783513*x4
    x47 = x0*x46
    x48 = x18*x46
    x49 = x13*x17
    x50 = 0.000733743665249811*x5
    x51 = 0.0446814916785584*x8
    x52 = x2*x39
    x53 = x15*x50
    x54 = x15*x51
    x55 = x17*x50
    x56 = x17*x51
    x57 = x13*x18
    x58 = -x17*x41 + x17*x43 + x17*x45 + x53 - x54
    x59 = x0*x58
    x60 = x13*(-x15*x41 + x15*x43 + x15*x45 - x55 + x56)
    x61 = 0.214136510870782*x2
    x62 = 0.0915174007171296*x5
    x63 = x4*x62
    x64 = 0.97250713111939*x8
    x65 = x4*x64
    x66 = x61 + x63 + x65
    x67 = 0.214136510870782*x4
    x68 = x2*x62
    x69 = x2*x64
    x70 = -x67 + x68 + x69
    x71 = x15*x70
    x72 = x18*x70
    x73 = x0*x17
    x74 = 0.97250713111939*x5
    x75 = 0.0915174007171296*x8
    x76 = x2*(x74 - x75)
    x77 = x15*x74
    x78 = x15*x75
    x79 = x17*x62 + x17*x64 + x4*x77 - x4*x78
    x80 = x17*x74
    x81 = x17*x75
    x82 = x15*x62 + x15*x64 - x4*x80 + x4*x81
    x83 = x0*x18
    x84 = x17*x61 + x17*x63 + x17*x65 + x77 - x78
    x85 = x13*x84
    x86 = x15*x61 + x15*x63 + x15*x65 - x80 + x81
    x87 = x0*x86
    x88 = x1*x84 + x72
    x89 = x1*x70
    x90 = x18*x84
    x91 = x13*x86
    x92 = 0.00457587003585648*x5
    x93 = 0.0486253565559695*x8
    x94 = x2*x92 + x2*x93 - 0.0107068255435391*x4
    x95 = x0*x15
    x96 = 0.0107068255435391*x2
    x97 = x4*x92
    x98 = x4*x93
    x99 = x18*x94
    x100 = 0.0486253565559695*x5
    x101 = 0.00457587003585648*x8
    x102 = x100*x15
    x103 = x101*x15
    x104 = x100*x17
    x105 = x101*x17
    x106 = x102 - x103 + x17*x96 + x17*x97 + x17*x98
    x107 = x0*x106
    x108 = x13*(-x104 + x105 + x15*x96 + x15*x97 + x15*x98)
    x109 = 0.867718379468268*x2
    x110 = 0.43937488084499*x5
    x111 = x110*x4
    x112 = 0.232410257982334*x8
    x113 = x112*x4
    x114 = x109 + x111 - x113
    x115 = 0.867718379468268*x4
    x116 = x110*x2
    x117 = x112*x2
    x118 = x115 - x116 + x117
    x119 = x118*x18
    x120 = 0.232410257982334*x5
    x121 = 0.43937488084499*x8
    x122 = x2*(x120 + x121)
    x123 = x120*x15
    x124 = x121*x15
    x125 = -x110*x17 + x112*x17 + x123*x4 + x124*x4
    x126 = x120*x17
    x127 = x121*x17
    x128 = x110*x15 - x112*x15 + x126*x4 + x127*x4
    x129 = -x109*x17 - x111*x17 + x113*x17 + x123 + x124
    x130 = x129*x13
    x131 = x109*x15 + x111*x15 - x113*x15 + x126 + x127
    x132 = x0*x131
    x133 = x1*x129 + x119
    x134 = x1*x118
    x135 = x129*x18
    x136 = x13*x131
    x137 = 0.0433859189734134*x2
    x138 = 0.0219687440422495*x5
    x139 = x138*x4
    x140 = 0.0116205128991167*x8
    x141 = x140*x4
    x142 = -x138*x2 + x140*x2 + 0.0433859189734134*x4
    x143 = x142*x18
    x144 = 0.0116205128991167*x5
    x145 = 0.0219687440422495*x8
    x146 = x144*x15
    x147 = x145*x15
    x148 = x144*x17
    x149 = x145*x17
    x150 = -x137*x17 - x139*x17 + x141*x17 + x146 + x147
    x151 = x0*x150
    x152 = x13*(x137*x15 + x139*x15 - x141*x15 + x148 + x149)

    return np.array([[0., 0., x0*x12 + x0*x20 + x13*x16, x0*x31 - x13*x27 + x23*x24, -x18*x35 + x33, 0., x0*x36, -x13*x37 + x18*x33 - x35, 0., 0., 0., 0., 0., 0.],
                     [0., 0., -x11*x18 + x17*x37, x1*x30 - x18*x23, -x1 *
                         x34, 0., x37 - x38, 0., 0., 0., 0., 0., 0., 0.],
                     [0., 0., x0*x16 - x12*x13 - x13*x20, -x0*x27 - x13*x31 - x23*x39, x0*x32 +
                         x18*x40, 0., -x13*x36, -x0*x37 + x0*x38 + x40, 0., 0., 0., 0., 0., 0.],
                     [0.893629833571167, -0.448564787567025, -hinge_z*x11 - x15*x47 + x39*(-x41 + x43 + x45) + x48*x49, -hinge_z*x23 + x0*(x17*x42 + x17*x44 + x4*x53 - x4*x54) + x52*(
                         x50 - x51) + x57*(x15*x42 + x15*x44 - x4*x55 + x4*x56), -x18*x60 - x59, x14, x13*(x1*x58 + x48), x1*x47 - x18*x59 - x60, 0., 0., 0., 0., 0., 0.],
                     [0., 0., -x13*x71 - x24*x66 - x72*x73, x13*x79 - x24*x76 - x82*x83, x18 *
                      x87 - x85, 0., -x0*x88, x13*x89 - x18*x85 + x87, 0., 0., 0., 0., 0., 0.],
                     [0., 0., -x17*x89 + x18*x66, -x1*x82 + x18*x76, x1 *
                      x86, 0., -x89 + x90, 0., 0., 0., 0., 0., 0., 0.],
                     [0., 0., -x0*x71 + x39*x66 + x49*x72, x0*x79 + x39*x76 + x57*x82, -x0 *
                      x84 - x18*x91, 0., x13*x88, x0*x89 - x0*x90 - x91, 0., 0., 0., 0., 0., 0.],
                     [-0.0915174007171296, -0.214136510870782, hinge_z*x66 - x39*(x96 + x97 + x98) - x49*x99 + x94*x95, hinge_z*x76 - x0*(x102*x4 - x103*x4 + x17*x92 + x17*x93) - x52*(
                         x100 - x101) - x57*(-x104*x4 + x105*x4 + x15*x92 + x15*x93), x107 + x108*x18, x67 - x68 - x69, -x13*(x1*x106 + x99), x107*x18 + x108 - x24*x94, 0., 0., 0., 0., 0., 0.],
                     [0., 0., x114*x24 - x118*x13*x15 - x119*x73, -x122*x24 + x125*x13 + x128*x83, -
                      x130 - x132*x18, 0., -x0*x133, x13*x134 - x130*x18 - x132, 0., 0., 0., 0., 0., 0.],
                     [0., 0., -x114*x18 - x134*x17, x1*x128 + x122*x18, -x1 *
                      x131, 0., -x134 + x135, 0., 0., 0., 0., 0., 0., 0.],
                     [0., 0., -x114*x39 - x118*x95 + x119*x49, x0*x125 + x122*x39 - x128*x57, -x0 *
                      x129 + x136*x18, 0., x13*x133, x0*x134 - x0*x135 + x136, 0., 0., 0., 0., 0., 0.],
                     [0.43937488084499, 0.867718379468268, -hinge_z*x114 + x142*x95 - x143*x49 + x39*(x137 + x139 - x141), hinge_z*x122 - x0*(-x138*x17 + x140*x17 + x146*x4 + x147*x4) - x52*(
                         x144 + x145) + x57*(x138*x15 - x140*x15 + x148*x4 + x149*x4), x151 - x152*x18, -x115 + x116 - x117, -x13*(x1*x150 + x143), -x142*x24 + x151*x18 - x152, 0., 0., 0., 0., 0., 0.],
                     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])


@nb.njit(cache=True)
def get_test_T(states):
    """
    base_x, base_y, base_p, base_q, base_r, hinge_z, hinge_p, hinge_q, rotors_x, rotors_y, rotors_z, rotors_p, rotors_q, rotors_r
    """

    base_x = states[0]
    base_y = states[1]
    base_p = states[2]
    base_q = states[3]
    base_r = states[4]
    hinge_z = states[5]
    hinge_p = states[6]
    hinge_q = states[7]
    rotors_x = states[8]
    rotors_y = states[9]
    rotors_z = states[10]
    rotors_p = states[11]
    rotors_q = states[12]
    rotors_r = states[13]

    x0 = np.cos(base_q)
    x1 = np.cos(base_r)
    x2 = x0*x1
    x3 = np.sin(base_p)
    x4 = np.sin(base_q)
    x5 = np.sin(base_r)
    x6 = x4*x5
    x7 = x0*x5
    x8 = x1*x4
    x9 = np.cos(base_p)

    return np.array([[x2 + x3*x6, x3*x8 - x7, x4*x9, base_x],
                     [x5*x9, x1*x9, -x3, base_y],
                     [x3*x7 - x8, x2*x3 + x6, x0*x9, 0.],
                     [0., 0., 0., 1.]])


@nb.njit(cache=True)
def get_hing_T(states):
    """
    base_x, base_y, base_p, base_q, base_r, hinge_z, hinge_p, hinge_q, rotors_x, rotors_y, rotors_z, rotors_p, rotors_q, rotors_r
    """

    base_x = states[0]
    base_y = states[1]
    base_p = states[2]
    base_q = states[3]
    base_r = states[4]
    hinge_z = states[5]
    hinge_p = states[6]
    hinge_q = states[7]
    rotors_x = states[8]
    rotors_y = states[9]
    rotors_z = states[10]
    rotors_p = states[11]
    rotors_q = states[12]
    rotors_r = states[13]

    x0 = np.sin(hinge_q)
    x1 = np.sin(base_p)
    x2 = np.sin(base_q)
    x3 = np.cos(base_p)
    x4 = x2*x3
    x5 = np.cos(base_q)
    x6 = x3*x5
    x7 = 0.448564787567025*x1 + 0.893629833571167*x4 + 0.0146748733049962*x6
    x8 = np.cos(hinge_p)
    x9 = x7*x8
    x10 = np.cos(hinge_q)
    x11 = np.cos(base_r)
    x12 = 0.0146748733049962*x2
    x13 = np.sin(base_r)
    x14 = 0.448564787567025*x3
    x15 = 0.893629833571167*x5
    x16 = x1*x13
    x17 = 0.893629833571167*x2
    x18 = 0.0146748733049962*x5
    x19 = -x11*x12 + x11*x15 - x13*x14 + x16*x17 + x16*x18
    x20 = np.sin(hinge_p)
    x21 = x1*x11
    x22 = -x11*x14 + x12*x13 - x13*x15 + x17*x21 + x18*x21
    x23 = x20*x22
    x24 = -0.214136510870782*x1 + 0.0915174007171296*x4 + 0.97250713111939*x6
    x25 = x24*x8
    x26 = 0.97250713111939*x2
    x27 = 0.214136510870782*x3
    x28 = 0.0915174007171296*x5
    x29 = 0.0915174007171296*x2
    x30 = 0.97250713111939*x5
    x31 = -x11*x26 + x11*x28 + x13*x27 + x16*x29 + x16*x30
    x32 = x11*x27 + x13*x26 - x13*x28 + x21*x29 + x21*x30
    x33 = x20*x32
    x34 = 0.867718379468268*x1 - 0.43937488084499*x4 + 0.232410257982334*x6
    x35 = x34*x8
    x36 = 0.232410257982334*x2
    x37 = 0.867718379468268*x3
    x38 = 0.43937488084499*x5
    x39 = 0.43937488084499*x2
    x40 = 0.232410257982334*x5
    x41 = x11*x36 + x11*x38 + x13*x37 + x16*x39 - x16*x40
    x42 = -x11*x37 + x13*x36 + x13*x38 - x21*x39 + x21*x40
    x43 = x20*x42

    return np.array([[x0*x23 - x0*x9 + x10*x19, x20*x7 + x22*x8, x0*x19 - x10*x23 + x10*x9, 0.893629833571167*base_x - 0.448564787567025*base_y + hinge_z*x7 - 0.258257036698329],
                     [x0*x25 - x0*x33 - x10*x31, -x20*x24 - x32*x8, -x0*x31 - x10*x25 + x10*x33, -
                         0.0915174007171296*base_x - 0.214136510870782*base_y - hinge_z*x24 + 0.116344254058977],
                     [x0*x35 - x0*x43 + x10*x41, -x20*x34 - x42*x8, x0*x41 - x10*x35 + x10*x43,
                         0.43937488084499*base_x + 0.867718379468268*base_y - hinge_z*x34 + 0.790231880961314],
                     [0., 0., 0., 1.]])


@nb.njit(cache=True)
def get_base_T(states):
    """
    base_x, base_y, base_p, base_q, base_r, hinge_z, hinge_p, hinge_q, rotors_x, rotors_y, rotors_z, rotors_p, rotors_q, rotors_r
    """

    base_x = states[0]
    base_y = states[1]
    base_p = states[2]
    base_q = states[3]
    base_r = states[4]
    hinge_z = states[5]
    hinge_p = states[6]
    hinge_q = states[7]
    rotors_x = states[8]
    rotors_y = states[9]
    rotors_z = states[10]
    rotors_p = states[11]
    rotors_q = states[12]
    rotors_r = states[13]

    x0 = np.cos(base_r)
    x1 = np.sin(base_q)
    x2 = 0.0146748733049962*x1
    x3 = np.sin(base_r)
    x4 = np.cos(base_p)
    x5 = 0.448564787567025*x4
    x6 = np.cos(base_q)
    x7 = 0.893629833571167*x6
    x8 = np.sin(base_p)
    x9 = x3*x8
    x10 = 0.893629833571167*x1
    x11 = 0.0146748733049962*x6
    x12 = x0*x8
    x13 = x1*x4
    x14 = x4*x6
    x15 = 0.97250713111939*x1
    x16 = 0.214136510870782*x4
    x17 = 0.0915174007171296*x6
    x18 = 0.0915174007171296*x1
    x19 = 0.97250713111939*x6
    x20 = 0.232410257982334*x1
    x21 = 0.867718379468268*x4
    x22 = 0.43937488084499*x6
    x23 = 0.43937488084499*x1
    x24 = 0.232410257982334*x6

    return np.array([[-x0*x2 + x0*x7 + x10*x9 + x11*x9 - x3*x5, -x0*x5 + x10*x12 + x11*x12 + x2*x3 - x3*x7, 0.893629833571167*x13 + 0.0146748733049962*x14 + 0.448564787567025*x8, 0.893629833571167*base_x - 0.448564787567025*base_y - 0.258257036698329],
                     [x0*x15 - x0*x17 - x16*x3 - x18*x9 - x19*x9, -x0*x16 - x12*x18 - x12*x19 - x15*x3 + x17*x3, -0.0915174007171296*x13 -
                         0.97250713111939*x14 + 0.214136510870782*x8, -0.0915174007171296*base_x - 0.214136510870782*base_y + 0.116344254058977],
                     [x0*x20 + x0*x22 + x21*x3 + x23*x9 - x24*x9, x0*x21 + x12*x23 - x12*x24 - x20*x3 - x22*x3, 0.43937488084499*x13 -
                         0.232410257982334*x14 - 0.867718379468268*x8, 0.43937488084499*base_x + 0.867718379468268*base_y + 0.790231880961314],
                     [0., 0., 0., 1.]])


@nb.njit(cache=True)
def get_platform_T(states):
    """
    base_x, base_y, base_p, base_q, base_r, hinge_z, hinge_p, hinge_q, rotors_x, rotors_y, rotors_z, rotors_p, rotors_q, rotors_r
    """

    base_x = states[0]
    base_y = states[1]
    base_p = states[2]
    base_q = states[3]
    base_r = states[4]
    hinge_z = states[5]
    hinge_p = states[6]
    hinge_q = states[7]
    rotors_x = states[8]
    rotors_y = states[9]
    rotors_z = states[10]
    rotors_p = states[11]
    rotors_q = states[12]
    rotors_r = states[13]

    return np.array([[0.893629833571167, -0.448564787567025, 0.0146748733049962, -0.258257036698329],
                     [-0.0915174007171296, -0.214136510870782, -
                         0.97250713111939, 0.116344254058977],
                     [0.43937488084499, 0.867718379468268, -
                         0.232410257982334, 0.790231880961314],
                     [0., 0., 0., 1.]])
