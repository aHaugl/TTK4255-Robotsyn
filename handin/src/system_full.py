from TF import TF
import sympy as sp
import numpy as np
from numbaprinter import create_numba_file

"""
This file defines the helicopter system. The None values used when creating new
TF means that the variable is not static. 

When running this file, an autogenerated file will be added to ../autogenerated
that contain all expressions given to create_numba_file
"""
platform_to_camera = np.loadtxt('../data/platform_to_camera.txt')

camera = TF('camera')
platform = camera.new_TF_from_t_mat('platform', platform_to_camera)
base = platform.new_TF('base', [None, None, 0], [None, None, None],
                       rotation_order='yxz')


hinge = base.new_TF('hinge', [0, 0, None], [None, None, 0],
                    rotation_order='xzy')

arm = hinge.new_TF('arm', [0, 0, -0.050], [0, 0, 0])

rotors = arm.new_TF('rotors', None, None, rotation_order='yzx')


variables = rotors.free_symbols

if __name__ == '__main__':
    rotors_t = camera.t_mat(rotors)
    rotors_t_flat = rotors_t.reshape(16, 1)
    rotors_t_jac = rotors_t_flat.jacobian(sp.Matrix(variables))

    arm_t = camera.t_mat(arm)
    arm_t_flat = arm_t.reshape(16, 1)
    arm_t_jac = arm_t_flat.jacobian(sp.Matrix(variables))

    hinge_t = camera.t_mat(hinge)
    base_t = camera.t_mat(base)
    platform_t = camera.t_mat(platform)

    create_numba_file('heli_system',
                      [['get_rotors_T', rotors_t, variables],
                       ['get_rotors_T_diff', rotors_t_jac, variables],
                       ['get_arm_T', arm_t, variables],
                       ['get_arm_T_diff', arm_t_jac, variables],

                       ['get_test_T', platform.t_mat(base), variables],

                       ['get_hing_T', hinge_t, variables],
                       ['get_base_T', base_t, variables],
                       ['get_platform_T', platform_t, variables]])
